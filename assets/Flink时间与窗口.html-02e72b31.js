import{_ as t,V as p,W as e,X as c,Z as n,a1 as a,a0 as s}from"./framework-25aba5a5.js";const o={},l=n("p",null,"主要介绍Flink中的水位线和窗口",-1),i=a('<figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/水位线与窗口 (1).png" alt="水位线与窗口 (1)" tabindex="0" loading="lazy"><figcaption>水位线与窗口 (1)</figcaption></figure><h2 id="时间语义" tabindex="-1"><a class="header-anchor" href="#时间语义" aria-hidden="true">#</a> 时间语义</h2><p><strong>事件时间</strong>：一个数据产生的时间，通常是跟随着数据的时间戳</p><p><strong>处理时间</strong>：数据被真正处理的时刻</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602195927086.png" alt="image-20230602195927086" tabindex="0" loading="lazy"><figcaption>image-20230602195927086</figcaption></figure><p>处理时间是我们计算效率的衡量标准，而事件时间会更符合我们的业务计算逻辑。所以更多时候我们使用事件时间；</p><p>从1.12版本开始，Flink已经将事件时间作为了默认的时间语义。</p><h2 id="水位线" tabindex="-1"><a class="header-anchor" href="#水位线" aria-hidden="true">#</a> 水位线</h2><h3 id="水位线的概念" tabindex="-1"><a class="header-anchor" href="#水位线的概念" aria-hidden="true">#</a> 水位线的概念</h3><p>在Flink中，用来衡量<strong>事件时间</strong>进展的标记，就被称作“水位线”（Watermark）。</p><h4 id="有序流中的水位线" tabindex="-1"><a class="header-anchor" href="#有序流中的水位线" aria-hidden="true">#</a> 有序流中的水位线</h4><p>为了提高效率，一般每隔一段时间生成一个水位线</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602200522546.png" alt="image-20230602200522546" tabindex="0" loading="lazy"><figcaption>image-20230602200522546</figcaption></figure><h4 id="乱序流中的水位线" tabindex="-1"><a class="header-anchor" href="#乱序流中的水位线" aria-hidden="true">#</a> 乱序流中的水位线</h4><ol><li>乱序+数据量小</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602200657113.png" alt="image-20230602200657113" tabindex="0" loading="lazy"><figcaption>image-20230602200657113</figcaption></figure><p>插入新的水位线时，先判断时间戳是否比之前的大，否则不生成</p><ol start="2"><li>乱序+数据量大</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602200919006.png" alt="image-20230602200919006" tabindex="0" loading="lazy"><figcaption>image-20230602200919006</figcaption></figure><p>保存之前数据中的最大时间戳，需要插入水位线时，直接以它作为水位线</p><p>乱序流中会有迟到数据</p><ol start="3"><li>乱序流+迟到数据</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602201123786.png" alt="image-20230602201123786" tabindex="0" loading="lazy"><figcaption>image-20230602201123786</figcaption></figure><p>可以在数据时间戳的基础上加上一些延迟（减去一个数）来保证不丢失数据。</p><h4 id="水位线的特点" tabindex="-1"><a class="header-anchor" href="#水位线的特点" aria-hidden="true">#</a> 水位线的特点</h4>',25),u=n("ul",null,[n("li",null,"水位线是插入到数据流中的一个标记，可以认为是一个特殊的数据"),n("li",null,"主要内容是一个时间戳，表示当前事件时间的进展"),n("li",null,"水位线的时间戳必须是单调递增的"),n("li",null,"可以设置延迟来确保处理乱序数据"),n("li",null,[s("水位线"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"w"),n("mo",{stretchy:"false"},"("),n("mi",null,"t"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"w(t)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},")")])])]),s("表示t之前的数据都到期了")])],-1),r=a(`<h3 id="生成水位线" tabindex="-1"><a class="header-anchor" href="#生成水位线" aria-hidden="true">#</a> 生成水位线</h3><h3 id="总体原则" tabindex="-1"><a class="header-anchor" href="#总体原则" aria-hidden="true">#</a> 总体原则</h3><p>处理的快，可将延迟设得低一点，可能会导致数据遗漏，计算结果不准确</p><h4 id="水位线生成策略" tabindex="-1"><a class="header-anchor" href="#水位线生成策略" aria-hidden="true">#</a> 水位线生成策略</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//分配时间戳，生成水位线</span>
stream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>watermark strategy<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WatermarkStrategy</code>是一个接口，包含时间戳分配器<code>TimestampAssigner</code>和一个水位线生成器<code>WatermarkGenerator</code></p><h4 id="flink内置水位线" tabindex="-1"><a class="header-anchor" href="#flink内置水位线" aria-hidden="true">#</a> Flink内置水位线</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>内置Watermark的生成原理
* 1、都是周期性生成的： 默认200ms
* 2、有序流：  watermark = 当前最大的事件时间 - 1ms
* 3、乱序流：  watermark = 当前最大的事件时间 - 延迟时间 - 1ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>有序流中的内置水位线设置</strong></p><p>特点: 时间戳单调增长，调用<code>WatermarkStrategy.forMonotonousTimestamps()</code></p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sensorDS<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span>
  <span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span><span class="token function">forMonotonousTimestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTimestampAssigner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SerializableTimestampAssigner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">WaterSensor</span> waterSensor<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> waterSensor<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中我们调用.withTimestampAssigner()方法，将数据中的timestamp字段提取出来，作为时间戳分配给数据元素；然后用内置的有序流水位线生成器构造出了生成策略。这样，提取出的数据时间戳，就是我们处理计算的事件时间。</p><p>这里需要注意的是，时间戳和水位线的单位，必须都是毫秒。</p><ol start="2"><li>乱序流中的内置水位线设置</li></ol><p>调用<code>WatermarkStrategy. forBoundedOutOfOrderness</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// TODO 1.定义Watermark策略</span>
<span class="token class-name">WatermarkStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span> watermarkStrategy <span class="token operator">=</span> <span class="token class-name">WatermarkStrategy</span>
  <span class="token comment">// 1.1 指定watermark生成：乱序的，等待3s</span>
  <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 1.2 指定 时间戳分配器，从数据中提取</span>
  <span class="token punctuation">.</span><span class="token function">withTimestampAssigner</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>element<span class="token punctuation">,</span> recordTimestamp<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回的时间戳，要 毫秒</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据=&quot;</span> <span class="token operator">+</span> element <span class="token operator">+</span> <span class="token string">&quot;,recordTs=&quot;</span> <span class="token operator">+</span> recordTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义水位线生成器" tabindex="-1"><a class="header-anchor" href="#自定义水位线生成器" aria-hidden="true">#</a> 自定义水位线生成器</h4><ol><li>周期性水位线生成器</li></ol><p>周期性生成器一般是通过onEvent()观察判断输入的事件，而在onPeriodicEmit()里发出水位线</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPeriodWatermarkGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">WatermarkGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 乱序等待时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> delayTs<span class="token punctuation">;</span>
    <span class="token comment">// 用来保存 当前为止 最大的事件时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> maxTs<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyPeriodWatermarkGenerator</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayTs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>delayTs <span class="token operator">=</span> delayTs<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxTs <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delayTs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每条数据来，都会调用一次： 用来提取最大的事件时间，保存下来
     *
     * <span class="token keyword">@param</span> <span class="token parameter">event</span>
     * <span class="token keyword">@param</span> <span class="token parameter">eventTimestamp</span> 提取到的数据的 事件时间
     * <span class="token keyword">@param</span> <span class="token parameter">output</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">T</span> event<span class="token punctuation">,</span> <span class="token keyword">long</span> eventTimestamp<span class="token punctuation">,</span> <span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxTs <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTs<span class="token punctuation">,</span> eventTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用onEvent方法，获取目前为止的最大时间戳=&quot;</span> <span class="token operator">+</span> maxTs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 周期性调用： 发射 watermark 这个方法由系统框架周期性地调用，默认 200ms一次。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">output</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPeriodicEmit</span><span class="token punctuation">(</span><span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>maxTs <span class="token operator">-</span> delayTs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用onPeriodicEmit方法，生成watermark=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>maxTs <span class="token operator">-</span> delayTs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>断点式水位线生成器</li></ol><p>遇到特定的数据直接在OnEvent方法中发送水位线</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPuntuatedWatermarkGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">WatermarkGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 乱序等待时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> delayTs<span class="token punctuation">;</span>
    <span class="token comment">// 用来保存 当前为止 最大的事件时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> maxTs<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyPuntuatedWatermarkGenerator</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayTs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>delayTs <span class="token operator">=</span> delayTs<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxTs <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delayTs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每条数据来，都会调用一次： 用来提取最大的事件时间，保存下来,并发射watermark
     *
     * <span class="token keyword">@param</span> <span class="token parameter">event</span>
     * <span class="token keyword">@param</span> <span class="token parameter">eventTimestamp</span> 提取到的数据的 事件时间
     * <span class="token keyword">@param</span> <span class="token parameter">output</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">T</span> event<span class="token punctuation">,</span> <span class="token keyword">long</span> eventTimestamp<span class="token punctuation">,</span> <span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maxTs <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTs<span class="token punctuation">,</span> eventTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>maxTs <span class="token operator">-</span> delayTs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用onEvent方法，获取目前为止的最大时间戳=&quot;</span> <span class="token operator">+</span> maxTs<span class="token operator">+</span><span class="token string">&quot;,watermark=&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>maxTs <span class="token operator">-</span> delayTs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 周期性调用： 不需要
     *
     * <span class="token keyword">@param</span> <span class="token parameter">output</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPeriodicEmit</span><span class="token punctuation">(</span><span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在数据源中发送水位线</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>env<span class="token punctuation">.</span><span class="token function">fromSource</span><span class="token punctuation">(</span>
kafkaSource<span class="token punctuation">,</span> <span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;kafkasource&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="水位线的传递" tabindex="-1"><a class="header-anchor" href="#水位线的传递" aria-hidden="true">#</a> 水位线的传递</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602210040304.png" alt="image-20230602210040304" tabindex="0" loading="lazy"><figcaption>image-20230602210040304</figcaption></figure><p>一个任务接到多个上游并行任务的水位线时，以最小的那个最为当期任务的事件时钟</p><h2 id="窗口-window" tabindex="-1"><a class="header-anchor" href="#窗口-window" aria-hidden="true">#</a> 窗口(Window)</h2><h3 id="窗口概念" tabindex="-1"><a class="header-anchor" href="#窗口概念" aria-hidden="true">#</a> 窗口概念</h3><h4 id="窗口" tabindex="-1"><a class="header-anchor" href="#窗口" aria-hidden="true">#</a> 窗口</h4><p>在Flink中，窗口可以把数据流切分成有限大小的多个存储桶，每个数据都会分发到对应的桶里，当达到窗口结束时间时，就对桶中的数据进行计算处理。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602191533854.png" alt="image-20230602191533854" tabindex="0" loading="lazy"><figcaption>image-20230602191533854</figcaption></figure><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><p><strong>按驱动类型分</strong></p><ol><li>时间窗口</li></ol><p>以时间点来定义窗口的开始和结束</p><ol start="2"><li>计数窗口</li></ol><p>基于元素的个数来截取数据</p><p><strong>按照窗口分配数据的规则</strong></p><ol><li>滚动窗口</li></ol><p>滚动窗口有固定的大小，是一种对数据进行“均匀切片”的划分方式。<strong>窗口之间没有重叠，也不会有间隔</strong></p><ol start="2"><li>滑动窗口</li></ol><p>除去窗口大小外，还有滑动步长。</p><p>滑动窗口会有重叠，适合计算结果更新频率非常高的场景</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602192030657.png" alt="image-20230602192030657" tabindex="0" loading="lazy"><figcaption>image-20230602192030657</figcaption></figure><ol start="3"><li>会话窗口</li></ol><p>会话窗口基于时间来定义，参数是会话超时时间。</p><p>如果相邻两个数据到来的时间间隔（Gap）小于指定的大小（size），那说明还在保持会话，它们就属于同一个窗口；如果gap大于size，那么新来的数据就应该属于新的会话窗口，而前一个窗口就应该关闭了</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602192217677.png" alt="image-20230602192217677" tabindex="0" loading="lazy"><figcaption>image-20230602192217677</figcaption></figure><ol start="4"><li>全局窗口</li></ol><p>全局有效，窗口没有结束的时候，默认不会做触发计算，需要自定义触发器</p><h3 id="窗口api" tabindex="-1"><a class="header-anchor" href="#窗口api" aria-hidden="true">#</a> 窗口API</h3><h4 id="按键分区窗口" tabindex="-1"><a class="header-anchor" href="#按键分区窗口" aria-hidden="true">#</a> 按键分区窗口</h4><p>使用keyby操作，数据集会被分为多条逻辑流keyedStream，会在多个并行子任务上运行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非按键分区" tabindex="-1"><a class="header-anchor" href="#非按键分区" aria-hidden="true">#</a> 非按键分区</h4><p>不会分为多条逻辑流，只在一个任务上运行。且无法调大窗口算子</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">windowAll</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="窗口api的调用" tabindex="-1"><a class="header-anchor" href="#窗口api的调用" aria-hidden="true">#</a> 窗口API的调用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>key selector<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>window assigner<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>window function<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定窗口分配器和窗口函数</p><h3 id="窗口分配器" tabindex="-1"><a class="header-anchor" href="#窗口分配器" aria-hidden="true">#</a> 窗口分配器</h3><p>作用：定义数据应该被分配到哪个窗口</p><h4 id="时间窗口" tabindex="-1"><a class="header-anchor" href="#时间窗口" aria-hidden="true">#</a> 时间窗口</h4><ol><li><strong>滚动处理时间窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingProcessingTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>滑动处理时间窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">SlidingProcessingTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>，<span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>处理时间会话窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">ProcessingTimeSessionWindows</span><span class="token punctuation">.</span><span class="token function">withGap</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>withDynamicGap() 动态提取gap</p><ol start="4"><li><strong>滚动事件时间窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingEventTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><strong>滑动事件时间窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">SlidingEventTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li><strong>事件时间会话窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">EventTimeSessionWindows</span><span class="token punctuation">.</span><span class="token function">withGap</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="计数窗口" tabindex="-1"><a class="header-anchor" href="#计数窗口" aria-hidden="true">#</a> 计数窗口</h4><ol><li><strong>滚动计数窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">countWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当元素数量达到10的时候，就会触发执行</p><ol start="2"><li><strong>滑动计算窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">countWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>长度是10，步长是3，每个窗口统计10个数据，每隔3个数据输出一次结果</p><ol start="3"><li><strong>全局窗口</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">GlobalWindows</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意使用全局窗口，必须自行定义触发器才能实现窗口计算，否则起不到任何作用。</p><h3 id="窗口函数" tabindex="-1"><a class="header-anchor" href="#窗口函数" aria-hidden="true">#</a> 窗口函数</h3><p>经窗口分配器处理之后，数据可以分配到对应的窗口中，窗口函数(window functions)定义窗口如何进行计算。</p><p>经过窗口分配器得到的数据类型是<code>windowedStream</code>，经过窗口函数处理后再次得到<code>DataStream</code>。</p><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602132933477.png" alt="数据流之间的转换" style="zoom:50%;"><p>根据处理的方式的不同，分为增量聚合函数和全窗口函数</p><h4 id="增量聚合函数" tabindex="-1"><a class="header-anchor" href="#增量聚合函数" aria-hidden="true">#</a> 增量聚合函数</h4><p>每来一条数据立即进行计算，中间保持一个简单的聚合状态，不输出。</p><ol><li><p>归约函数(ReduceFunction)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 窗口函数： 增量聚合 Reduce</span>
<span class="token doc-comment comment">/**
         * 窗口的reduce：
         * 1、相同key的第一条数据来的时候，不会调用reduce方法
         * 2、增量聚合： 来一条数据，就会计算一次，但是不会输出
         * 3、在窗口触发的时候，才会输出窗口的最终计算结果
         */</span>
<span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span> reduce <span class="token operator">=</span> sensorWS<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">ReduceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">WaterSensor</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">WaterSensor</span> value1<span class="token punctuation">,</span> <span class="token class-name">WaterSensor</span> value2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用reduce方法，value1=&quot;</span> <span class="token operator">+</span> value1 <span class="token operator">+</span> <span class="token string">&quot;,value2=&quot;</span> <span class="token operator">+</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WaterSensor</span><span class="token punctuation">(</span>value1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value2<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value1<span class="token punctuation">.</span><span class="token function">getVc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value2<span class="token punctuation">.</span><span class="token function">getVc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>聚合函数(AggregateFunction)</p></li></ol><p>聚合状态的类型、输出结果的类型和输入数据类型可以不一致</p><p>接口中有四个方法：</p><ul><li><p>createAccumulator()：创建一个累加器，这就是为聚合创建了一个初始状态，每个聚合任务只会调用一次。</p></li><li><p>add()：将输入的元素添加到累加器中。</p></li><li><p>getResult()：从累加器中提取聚合的输出结果。</p></li><li><p>merge()：合并两个累加器，并将合并后的状态作为一个累加器返回。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
         * 1、属于本窗口的第一条数据来，创建窗口，创建累加器
         * 2、增量聚合： 来一条计算一条， 调用一次add方法
         * 3、窗口输出时调用一次getresult方法
         * 4、输入、中间累加器、输出 类型可以不一样，非常灵活
         */</span>
<span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aggregate <span class="token operator">=</span> sensorWS<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span>
  <span class="token doc-comment comment">/**
                 * 第一个类型： 输入数据的类型
                 * 第二个类型： 累加器的类型，存储的中间计算结果的类型
                 * 第三个类型： 输出的类型
                 */</span>
  <span class="token keyword">new</span> <span class="token class-name">AggregateFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
                     * 创建累加器，初始化累加器
                     * <span class="token keyword">@return</span>
                     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建累加器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
                     * 聚合逻辑
                     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
                     * <span class="token keyword">@param</span> <span class="token parameter">accumulator</span>
                     * <span class="token keyword">@return</span>
                     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">WaterSensor</span> value<span class="token punctuation">,</span> <span class="token class-name">Integer</span> accumulator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用add方法,value=&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> accumulator <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getVc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
                     * 获取最终结果，窗口触发时输出
                     * <span class="token keyword">@param</span> <span class="token parameter">accumulator</span>
                     * <span class="token keyword">@return</span>
                     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> accumulator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用getResult方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> accumulator<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 只有会话窗口才会用到</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用merge方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flink也为窗口的聚合提供了一系列预定义的简单聚合方法，可以直接基于WindowedStream调用。主要包括.sum()/max()/maxBy()/min()/minBy</p><p>我们可以发现，增量聚合函数其实就是在用流处理的思路来处理有界数据集，核心是保持一个聚合状态，当数据到来时不停地更新状态。</p><h4 id="全窗口函数-full-window-functions" tabindex="-1"><a class="header-anchor" href="#全窗口函数-full-window-functions" aria-hidden="true">#</a> 全窗口函数(full window functions)</h4><p>窗口操作中的另一大类就是全窗口函数。与增量聚合函数不同，全窗口函数需要先收集窗口中的数据，并在内部缓存起来，等到窗口要输出结果的时候再取出数据进行计算。 包含上下文信息</p><ol><li><p>窗口函数（windowfunction）</p><p>逐渐弃用</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream
<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>key
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>window
<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyWindowFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>处理窗口函数(ProcessWindowFunction)</li></ol><p>可以拿到窗口中的数据、上下文对象（窗口信息、当前的时间和状态）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> process <span class="token operator">=</span> sensorWS
  <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">ProcessWindowFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
                             * 全窗口函数计算逻辑：  窗口触发时才会调用一次，统一计算窗口的所有数据
                             * <span class="token keyword">@param</span> <span class="token parameter">s</span>   分组的key
                             * <span class="token keyword">@param</span> <span class="token parameter">context</span>  上下文
                             * <span class="token keyword">@param</span> <span class="token parameter">elements</span> 存的数据
                             * <span class="token keyword">@param</span> <span class="token parameter">out</span>      采集器
                             * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
                             */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span> elements<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token comment">// 上下文可以拿到window对象，还有其他东西：侧输出流 等等</span>
      <span class="token keyword">long</span> startTs <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">long</span> endTs <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> windowStart <span class="token operator">=</span> <span class="token class-name">DateFormatUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>startTs<span class="token punctuation">,</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> windowEnd <span class="token operator">=</span> <span class="token class-name">DateFormatUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>endTs<span class="token punctuation">,</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">long</span> count <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">estimateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token string">&quot;key=&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;的窗口[&quot;</span> <span class="token operator">+</span> windowStart <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> windowEnd <span class="token operator">+</span> <span class="token string">&quot;)包含&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;条数据===&gt;&quot;</span> <span class="token operator">+</span> elements<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增量聚合和全窗口的结合" tabindex="-1"><a class="header-anchor" href="#增量聚合和全窗口的结合" aria-hidden="true">#</a> 增量聚合和全窗口的结合</h4><p>.reduce / .aggregate 传入两个参数，基于第一个参数（增量聚合函数）来处理窗口数据，每来一个数据就做一次聚合；等到窗口需要触发计算时，则调用第二个参数（全窗口函数）的处理逻辑输出结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> sensorWS<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">MyAgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的全窗口函数就不再缓存所有数据了，而是直接将增量聚合函数的结果拿来当作了Iterable类型的输入。</p><p>窗口处理的主体还是增量聚合，而引入全窗口函数又可以获取到更多的信息包装输出，这样的结合兼具了两种窗口函数的优势，在保证处理性能和实时性的同时支持了更加丰富的应用场景。</p><h3 id="其他api" tabindex="-1"><a class="header-anchor" href="#其他api" aria-hidden="true">#</a> 其他API</h3><ol><li>触发器（Trigger）</li></ol><p>触发执行窗口函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>移除器(Evictor)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">evictor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvictor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>允许延迟</li></ol><div class="language-jav line-numbers-mode" data-ext="jav"><pre class="language-jav"><code>stream.keyBy(...)
. TumblingEventTimeWindows.of(Time.hours(1))
.allowedLateness(Time.minutes(1))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个小时滚动窗口，允许1分钟的延迟。触发计算和清除窗口操作分开了</p><ol start="4"><li>侧输入流</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WaterSensor</span><span class="token punctuation">&gt;</span></span> lateTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;late-data&quot;</span><span class="token punctuation">,</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token function">POJO</span><span class="token punctuation">(</span><span class="token class-name">WaterSensor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingEventTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">allowedLateness</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 推迟2s关窗</span>
<span class="token punctuation">.</span><span class="token function">sideOutputLateData</span><span class="token punctuation">(</span>lateTag<span class="token punctuation">)</span> <span class="token comment">// 关窗后的迟到数据，放入侧输出流</span>
process<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>lateTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printToErr</span><span class="token punctuation">(</span><span class="token string">&quot;关窗后的迟到数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="窗口的生命周期" tabindex="-1"><a class="header-anchor" href="#窗口的生命周期" aria-hidden="true">#</a> 窗口的生命周期</h3><ol><li>创建</li></ol><p>由窗口分配器指定</p><ol start="2"><li>窗口计算的触发</li></ol><p>窗口函数和触发器</p><ol start="3"><li>窗口的销毁</li></ol><p>时间达到结束点，只对时间窗口有销毁机制，计数窗口和全局窗口不会。</p><h2 id="迟到数据的处理" tabindex="-1"><a class="header-anchor" href="#迟到数据的处理" aria-hidden="true">#</a> 迟到数据的处理</h2><h3 id="推迟水印推进" tabindex="-1"><a class="header-anchor" href="#推迟水印推进" aria-hidden="true">#</a> 推迟水印推进</h3><p>设置乱序容忍度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="窗口延迟关闭" tabindex="-1"><a class="header-anchor" href="#窗口延迟关闭" aria-hidden="true">#</a> 窗口延迟关闭</h3><p><code>.allowedLateness</code></p><p>允许迟到只能用在Event time 上</p><h3 id="使用侧流接受迟到的数据" tabindex="-1"><a class="header-anchor" href="#使用侧流接受迟到的数据" aria-hidden="true">#</a> 使用侧流接受迟到的数据</h3><p>如上（侧输入流）</p><h2 id="基于时间的合流" tabindex="-1"><a class="header-anchor" href="#基于时间的合流" aria-hidden="true">#</a> 基于时间的合流</h2><h3 id="窗口联结-window-join" tabindex="-1"><a class="header-anchor" href="#窗口联结-window-join" aria-hidden="true">#</a> 窗口联结(window join)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>stream2<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeySelector</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeySelector</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WindowAssigner</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JoinFunction</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>where制定第一条流中的key</p><p>equalTo 传入第二条流中的key</p><p>上述两者相同的元素，如果在同一个窗口中，则通过联结函数进行处理</p><p>window 传入窗口分配器</p><p>类似于有固定时间范围的inner join ，左边有，右边有。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JoinFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
                     * 关联上的数据，调用join方法
                     * <span class="token keyword">@param</span> <span class="token parameter">first</span>  ds1的数据
                     * <span class="token keyword">@param</span> <span class="token parameter">second</span> ds2的数据
                     * <span class="token keyword">@return</span>
                     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
                     */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> first <span class="token operator">+</span> <span class="token string">&quot;&lt;-----&gt;&quot;</span> <span class="token operator">+</span> second<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="间隔联结-interval-join" tabindex="-1"><a class="header-anchor" href="#间隔联结-interval-join" aria-hidden="true">#</a> 间隔联结（Interval Join）</h3><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230602181351533.png" alt="image-20230602181351533" tabindex="0" loading="lazy"><figcaption>image-20230602181351533</figcaption></figure><h4 id="调用" tabindex="-1"><a class="header-anchor" href="#调用" aria-hidden="true">#</a> 调用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream1
<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeySelector</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">intervalJoin</span><span class="token punctuation">(</span>stream2<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeySelector</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span>process <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessJoinFunction</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token annotation punctuation">@Override</span>
  <span class="token comment">//每当检测到一组匹配，就会调用这里的.processElement()方法</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> left<span class="token punctuation">,</span> <span class="token class-name">Integer</span> right<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="处理迟到数据实例" tabindex="-1"><a class="header-anchor" href="#处理迟到数据实例" aria-hidden="true">#</a> 处理迟到数据实例</h4><p>使用侧流</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//2. 调用 interval join</span>
<span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ks1LateTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;ks1-late&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ks2LateTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;ks2-late&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token function">TUPLE</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INT</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> process <span class="token operator">=</span> ks1<span class="token punctuation">.</span><span class="token function">intervalJoin</span><span class="token punctuation">(</span>ks2<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sideOutputLeftLateData</span><span class="token punctuation">(</span>ks1LateTag<span class="token punctuation">)</span>  <span class="token comment">// 将 ks1的迟到数据，放入侧输出流</span>
  <span class="token punctuation">.</span><span class="token function">sideOutputRightLateData</span><span class="token punctuation">(</span>ks2LateTag<span class="token punctuation">)</span> <span class="token comment">// 将 ks2的迟到数据，放入侧输出流</span>
  <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">ProcessJoinFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
                             * 两条流的数据匹配上，才会调用这个方法
                             * <span class="token keyword">@param</span> <span class="token parameter">left</span>  ks1的数据
                             * <span class="token keyword">@param</span> <span class="token parameter">right</span> ks2的数据
                             * <span class="token keyword">@param</span> <span class="token parameter">ctx</span>   上下文
                             * <span class="token keyword">@param</span> <span class="token parameter">out</span>   采集器
                             * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
                             */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token comment">// 进入这个方法，是关联上的数据</span>
      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token string">&quot;&lt;------&gt;&quot;</span> <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;主流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>ks1LateTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printToErr</span><span class="token punctuation">(</span><span class="token string">&quot;ks1迟到数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>ks2LateTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printToErr</span><span class="token punctuation">(</span><span class="token string">&quot;ks2迟到数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,157);function k(d,m){return p(),e("div",null,[l,c(" more "),i,u,r])}const g=t(o,[["render",k],["__file","Flink时间与窗口.html.vue"]]);export{g as default};
