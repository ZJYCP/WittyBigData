import{_ as s,V as e,W as t,X as l,Z as a,a0 as n,a1 as i}from"./framework-25aba5a5.js";const o={},d=a("p",null,[n("HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有"),a("strong",null,"高容错、高吞吐量"),n("等特性，可以部署在"),a("strong",null,"低成本"),n("的硬件上")],-1),p=i(`<h2 id="hdfs设计原理" tabindex="-1"><a class="header-anchor" href="#hdfs设计原理" aria-hidden="true">#</a> HDFS设计原理</h2><h3 id="hdfs架构" tabindex="-1"><a class="header-anchor" href="#hdfs架构" aria-hidden="true">#</a> HDFS架构</h3><p>HDFS 遵循主/从架构，由单个 NameNode(NN) 和多个 DataNode(DN)以及SecondaryNameNode 组成：</p><ul><li><strong>NameNode</strong> : 负责执行有关 <code>文件系统命名空间</code> 的操作，例如打开，关闭、重命名文件和目录等。它同时还负责集群<strong>元数据的存储</strong>，记录着文件中各个数据块的位置信息。</li></ul><blockquote><p>元数据：目录结构以及分块位置信息</p></blockquote><ul><li><strong>DataNode</strong>：负责提供来自文件系统客户端的读写请求，执行块的创建，删除等操作。</li><li><strong>SecondaryNameNode</strong> ： 监控HDFS的状态，获取HDFS元数据的快照。</li></ul><h3 id="文件系统命名空间" tabindex="-1"><a class="header-anchor" href="#文件系统命名空间" aria-hidden="true">#</a> 文件系统命名空间</h3><p>HDFS 的 <code>文件系统命名空间</code> 的层次结构与大多数文件系统类似 (如 Linux)， 支持目录和文件的创建、移动、删除和重命名等操作，支持配置用户和访问权限，但不支持硬链接和软连接。<code>NameNode</code> 负责维护文件系统名称空间，记录对名称空间或其属性的任何更改。</p><h3 id="数据复制" tabindex="-1"><a class="header-anchor" href="#数据复制" aria-hidden="true">#</a> 数据复制</h3><p>为了保证容错性，HDFS 提供了数据复制机制。HDFS 将每一个文件存储为一系列<strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认情况下，块大小是 128M，默认复制因子是 3）。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68646673646174616e6f6465732e706e67.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="数据复制的实现原理" tabindex="-1"><a class="header-anchor" href="#数据复制的实现原理" aria-hidden="true">#</a> 数据复制的实现原理</h3><p>大型的 HDFS 实例在通常分布在多个机架的多台服务器上，不同机架上的两台服务器之间通过交换机进行通讯。在大多数情况下，同一机架中的服务器间的网络带宽大于不同机架中的服务器之间的带宽。因此 HDFS 采用机架感知副本放置策略，对于常见情况，当复制因子为 3 时，HDFS 的放置策略是：</p><p>在写入程序位于 <code>datanode</code> 上时，就优先将写入文件的一个副本放置在该 <code>datanode</code> 上，否则放在随机 <code>datanode</code> 上。之后在另一个远程机架上的任意一个节点上放置另一个副本，并在该机架上的另一个节点上放置最后一个副本。此策略可以减少机架间的写入流量，从而提高写入性能。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f686466732de69cbae69eb62e706e67.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果复制因子大于 3，则随机确定第 4 个和之后副本的放置位置，同时保持每个机架的副本数量低于上限，上限值通常为 <code>（复制系数 - 1）/机架数量 + 2</code>，需要注意的是不允许同一个 <code>dataNode</code> 上具有同一个块的多个副本。</p><h3 id="副本的选择" tabindex="-1"><a class="header-anchor" href="#副本的选择" aria-hidden="true">#</a> 副本的选择</h3><p>为了最大限度地减少带宽消耗和读取延迟，HDFS 在执行读取请求时，优先读取距离读取器<strong>最近的副本</strong>。如果在与读取器节点相<strong>同的机架</strong>上存在副本，则优先选择该副本。如果 HDFS 群集跨越多个数据中心，则优先选择<strong>本地数据中心</strong>上的副本。</p><h3 id="架构的稳定性" tabindex="-1"><a class="header-anchor" href="#架构的稳定性" aria-hidden="true">#</a> 架构的稳定性</h3><ol><li>心跳机制和重新复制</li></ol><p>每个 DataNode 定期向 NameNode 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 DataNode 标记为死亡。NameNode 不会将任何新的 IO 请求转发给标记为死亡的 DataNode，也不会再使用这些 DataNode 上的数据。 由于数据不再可用，可能会导致某些块的复制因子小于其指定值，NameNode 会跟踪这些块，并<strong>在必要的时候进行重新复制</strong>。</p><ol start="2"><li>数据的完整性</li></ol><p>由于存储设备故障等原因，存储在 DataNode 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，HDFS 提供了数据完整性校验机制来保证数据的完整性，具体操作如下：</p><p>当客户端创建 HDFS 文件时，它会计算文件的每个块的 <code>校验和</code>，并将 <code>校验和</code> 存储在同一 HDFS 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 DataNode 接收的数据是否与存储在关联校验和文件中的 <code>校验和</code> 匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 DataNode 获取该块的其他可用副本。</p><ol start="3"><li>元数据磁盘故障</li></ol><p><code>FsImage</code> 和 <code>EditLog</code> 是 HDFS 的核心数据，这些数据的意外丢失可能会导致整个 HDFS 服务不可用。为了避免这个问题，可以配置 NameNode 使其支持 <code>FsImage</code> 和 <code>EditLog</code> 多副本同步，这样 <code>FsImage</code> 或 <code>EditLog</code> 的任何改变都会引起每个副本 <code>FsImage</code> 和 <code>EditLog</code> 的同步更新。</p><ol start="4"><li>支持快照</li></ol><p>快照支持在特定时刻存储数据副本，在数据意外损坏时，可以通过回滚操作恢复到健康的数据状态。</p><h2 id="hdfs的特点" tabindex="-1"><a class="header-anchor" href="#hdfs的特点" aria-hidden="true">#</a> HDFS的特点</h2><ol><li>高容错：有副本机制</li><li>高吞吐量：高吞吐量，而非低延迟</li><li>大文件支持：GB到TB级别的</li><li>简单一致性模型：适合一次写入多次读取的访问模型。支持将内容追加到文件末尾，但不支持数据的随机访问，不能从文件任意位置新增数据</li><li>跨平台移植性：其他大数据计算框架都可以将其作为数据持久化的方案</li><li>分块存储</li></ol><h3 id="安全模式" tabindex="-1"><a class="header-anchor" href="#安全模式" aria-hidden="true">#</a> 安全模式</h3><ul><li>用于确保数据块的完整性</li></ul><p>在hdfs启动后，会计算datanode上的<strong>副本率</strong>，如果小于某个阈值(0.99)，则会复制副本到其他datanode。</p><p>在安全模式下，系统<strong>只接受读数据请求</strong>，不接受删除，修改等变更请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hdfs dfsadmin <span class="token parameter variable">-safemode</span> get <span class="token punctuation">(</span>enter、leave<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hdfs基础命令行操作" tabindex="-1"><a class="header-anchor" href="#hdfs基础命令行操作" aria-hidden="true">#</a> HDFS基础命令行操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hdfs dfs <span class="token comment"># 前缀</span>
hdfs dfs <span class="token parameter variable">-ls</span> URI
<span class="token punctuation">..</span> <span class="token parameter variable">-lsr</span> URL <span class="token comment"># 递归显示</span>
<span class="token parameter variable">-mkdir</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> paths <span class="token comment">#[递归]创建目录</span>
<span class="token parameter variable">-put</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>dst<span class="token operator">&gt;</span> <span class="token comment"># 本地拷贝到hdfs</span>
<span class="token parameter variable">-moveFromLocal</span> <span class="token operator">&lt;</span>lcoal<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>dst<span class="token operator">&gt;</span> <span class="token comment"># 本地移动到hdfs</span>
<span class="token parameter variable">-appendToFile</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>dst<span class="token operator">&gt;</span> <span class="token comment"># 追加到指定文件中</span>

<span class="token parameter variable">-get</span> <span class="token operator">&lt;</span>src<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span> <span class="token comment"># 文件拷贝到本地 -crc -ignorecrc</span>
<span class="token parameter variable">-copyToLocal</span> <span class="token operator">&lt;</span>src<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>local<span class="token operator">&gt;</span> <span class="token comment"># hdfs拷贝到本地</span>

<span class="token parameter variable">-move</span> URI <span class="token operator">&lt;</span>dest<span class="token operator">&gt;</span> <span class="token comment"># 移动文件，不能跨文件系统</span>
<span class="token parameter variable">-rm</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> URI <span class="token comment"># 删除</span>
<span class="token parameter variable">-cp</span> URI <span class="token operator">&lt;</span>dest<span class="token operator">&gt;</span> <span class="token comment">#拷贝</span>
<span class="token parameter variable">-cat</span>
<span class="token parameter variable">-tail</span>
<span class="token parameter variable">-text</span>
<span class="token parameter variable">-chmod</span> <span class="token comment">#改变文件权限</span>
<span class="token parameter variable">-chown</span> <span class="token comment"># 改变所属用户和用户组</span>
<span class="token parameter variable">-df</span>
<span class="token parameter variable">-du</span>
<span class="token parameter variable">-count</span>
<span class="token parameter variable">-setrep</span> <span class="token comment"># 设置副本数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hdfs的block和副本机制" tabindex="-1"><a class="header-anchor" href="#hdfs的block和副本机制" aria-hidden="true">#</a> HDFS的block和副本机制</h2><h3 id="抽象为block的好处" tabindex="-1"><a class="header-anchor" href="#抽象为block的好处" aria-hidden="true">#</a> 抽象为block的好处</h3><ol><li>一个文件可能大于集群中的任意一块磁盘</li><li>简化存储子系统</li><li>适合数据备份，提高容错和可用性</li></ol><h3 id="块缓存" tabindex="-1"><a class="header-anchor" href="#块缓存" aria-hidden="true">#</a> 块缓存</h3><p><strong>通常Datanode从磁盘中读取块，但对于频繁访问的文件，其块会被缓存到Datanode的内存汇中，以堆外块缓存的形式存在</strong></p><p>作业调度器通过在缓存块的DataNode上运行任务，提高读操作性能</p><h3 id="hdfs的文件权限验证" tabindex="-1"><a class="header-anchor" href="#hdfs的文件权限验证" aria-hidden="true">#</a> hdfs的文件权限验证</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>r:read
w:write
x:execute
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hdfs写文件操作" tabindex="-1"><a class="header-anchor" href="#hdfs写文件操作" aria-hidden="true">#</a> HDFS写文件操作</h2><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230306203654621.png" alt="image-20230306203654621" tabindex="0" loading="lazy"><figcaption>image-20230306203654621</figcaption></figure><ol><li><strong>Client发起文件上传请求</strong>，通过<strong>RPC</strong>NameNode进行通信，NameNode检查目标文件是否存在，父目录是否存在，返回是否可以上传</li><li>Client请求第一个block该传输到哪些DataNode上</li><li>NameNode根据备份数和机架感知原理进行文件分配，返回DataNode的地址 A、B、C</li><li>Client请求3台DataNode中的一台A（建立pipeline），A收到后调用B，B调用C，建立完成后，逐级返回client</li><li>Client开始往A传第一个block，以packet(64K)为单位，A收到后给B，B给C。A会维护一个应答响应队列</li><li>在pipeline的反方向，逐个发送ack，由A将ack发送给Client</li><li>当第一个block传输完成后，Client再次请求上传第2个，重复步骤2-6</li></ol><h3 id="机架感知" tabindex="-1"><a class="header-anchor" href="#机架感知" aria-hidden="true">#</a> 机架感知</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230306205300286.png" alt="机架" tabindex="0" loading="lazy"><figcaption>机架</figcaption></figure><p>第一个副本在Client所处的节点上，如果客户端在集群外面，则随机选择一个</p><p>第二个副本和第一个副本处于相同的机架上，随机节点</p><p>第三个副本位于不同的机架上，随机节点</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230306205437608.png" alt="image-20230306205437608" tabindex="0" loading="lazy"><figcaption>image-20230306205437608</figcaption></figure><h2 id="hdfs读文件过程" tabindex="-1"><a class="header-anchor" href="#hdfs读文件过程" aria-hidden="true">#</a> HDFS读文件过程</h2><ol><li>Client向NameNode发起RPC请求，确定请求文件的block所处的位置</li><li>NameNode返回该文件的部分或全部block列表。对于每个block，返回所有副本的datanode地址，并且按照网络拓扑距离以及超时情况进行排序</li><li>client选取靠前等dn进行读取，如果Client本身就是dn，则直接本地读取</li><li>读完列表的block后，如有的话，会继续向NameNode请求下一批block列表</li><li>读取完一个block会进行checksum验证，如果出错，会通知NameNode，并从下一个dn读取</li><li>最终读取的所有block合并为一个文件</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230308142943262.png" alt="image-20230308142943262" tabindex="0" loading="lazy"><figcaption>image-20230308142943262</figcaption></figure><h2 id="namenode工作机制及元数据管理" tabindex="-1"><a class="header-anchor" href="#namenode工作机制及元数据管理" aria-hidden="true">#</a> NameNode工作机制及元数据管理</h2><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230308144239598.png" alt="image-20230308144239598" tabindex="0" loading="lazy"><figcaption>image-20230308144239598</figcaption></figure><h3 id="namenode工作机制及启动" tabindex="-1"><a class="header-anchor" href="#namenode工作机制及启动" aria-hidden="true">#</a> NameNode工作机制及启动</h3><ul><li>NameNode</li></ul><ol><li>第一次启动初始化后，创建fsimage、edits文件。后续直接加载这两个文件到内存</li><li>客户端对元数据的增删改的请求</li><li>NameNode记录操作日志、更新滚动日志</li><li>NameNode在内存中对数据进行增删改查</li></ol><ul><li>Secondary NameNode (辅助管理FSImage和edits)</li></ul><ol><li>Secondary NameNode询问NameNode是否需要checkpoint</li><li>Secondary NameNode请求执行checkpoint</li><li>NameNode滚<strong>动正在写的eidts日志</strong>（请求 namenode 停止使用 edits，暂时将 新写操作放入一个新的文件中(edits.new)）</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode（通过<strong>http get</strong>）</li><li>Secondary NameNode加载编辑日志和镜像文件，并合并</li><li>生成新的镜像文件fsimage.chkpoint</li><li>拷贝fsimage.chkpoint到NameNode（通过<strong>http post</strong>）</li><li>NameNode将fsimage.chkpoint重命名为fsimage，把edits.new替换为edits</li></ol><p><strong>合并时机</strong></p><ol><li>时间间隔</li><li>操作次数</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230308144625233.png" alt="image-20230308144625233" tabindex="0" loading="lazy"><figcaption>image-20230308144625233</figcaption></figure><h3 id="fsimage和edits" tabindex="-1"><a class="header-anchor" href="#fsimage和edits" aria-hidden="true">#</a> FSImage和edits</h3><p>这两个文件记录了所有数据的元数据信息。</p><p>客户端对进行写文件时会首先被记录在edits上，fsimage是NameNode关于元数据的镜像，包含了NameNode管理下的所有datanode中<strong>文件及文件block及block所在的datanode</strong>的元数据信息。</p><p>应为fsimage是完整的镜像，内容很大，每次都加载到内存中生成树状拓扑结构，非常耗内存和cpu。</p><h3 id="fsimage和edits文件查看" tabindex="-1"><a class="header-anchor" href="#fsimage和edits文件查看" aria-hidden="true">#</a> FSimage和edits文件查看</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hdfs oiv <span class="token parameter variable">-i</span> fsimage_0000000000000000112 <span class="token parameter variable">-p</span> XML <span class="token parameter variable">-o</span> hello.xml

hdfs oev <span class="token parameter variable">-i</span> edits_0000000000000000112-0000000000000000113 <span class="token parameter variable">-o</span> myedit.xml <span class="token parameter variable">-p</span> XML
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="namenode故障恢复" tabindex="-1"><a class="header-anchor" href="#namenode故障恢复" aria-hidden="true">#</a> NameNode故障恢复</h3><p>使用Secondary NameNode的FSImage和edits文件，拷贝到NameNode下</p><ul><li>相关路径</li></ul><p>Hdfs-site.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--namenode 保存
--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  	 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:///export/servers/hadoop-.6.0cdh5.14.0/hadoopDatas/namenodeDatas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!--Secondary NameNode  保存--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  	 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:///export/servers/hadoop-.6.0cdh5.14.0/hadoopDatas/nn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>故障恢复流程</li></ul><ol><li>删除NameNode的FSImage和edits文件</li><li>拷贝Secondary NameNode的这两个文件到NameNode</li><li>重启NameNode</li></ol><h2 id="datanode工作机制" tabindex="-1"><a class="header-anchor" href="#datanode工作机制" aria-hidden="true">#</a> datanode工作机制</h2><ol><li>工作机制</li></ol><ul><li>数据块在datanode上以文件的形式存储在磁盘上，包括数据文件本身以及元数据包括数据块的长度、校验和、时间戳</li><li>datanode启动后，默认每个1小时向NameNode上报所有块的信息</li><li>心跳每3秒一次；如果超过10分钟没有收到某个datanode的心跳，则认为该节点不可用</li><li>加入和退出一些机器</li></ul><ol start="2"><li>数据完整性</li></ol><ul><li>datanode读取block时，会计算checksum</li><li>计算后的值与创建时的值不同，说明block以及损坏</li><li>client读取其他dn上的block</li><li>datanode在其文件创建成功后周期验证checksum</li></ul><ol start="3"><li>掉线时限参数</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>timeout = 2 * dfs.namenode.heartbeat.recheck-interval + 10 * dfs.heartbeat.interval

recheck-interval = 5min
heartbeat.interval = 3s

默认timeout=10分30秒
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hdfs其他重要功能" tabindex="-1"><a class="header-anchor" href="#hdfs其他重要功能" aria-hidden="true">#</a> HDFS其他重要功能</h2><ol><li>多个集群中间的数据拷贝</li></ol><p>distcp</p><ol><li>归档文件archive</li></ol><p>对于小文件来说，过多的元数据会耗尽NameNode的大部分内存。Hadoop存档文件将文件存入hdfs块，减少内存的使用，并允许对文件的透明访问</p><ul><li>创建归档文件</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bin/hadoop archive -archiveName myhar.har -p /user/root /user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看归档文件内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hdfs dfs -lsr /usr/myhar.har
hdfs dhs -lsr har://user/myhar.har
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解压归档文件</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hdfs dfs -cp har://user/my.har/* /user/har/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>hdfs快照</li><li>hdfs回收站 <ol><li>回收站的两个参数：删除的文件的存活时间，检查回收站的时间间隔</li><li>启用回收站:Core-site.xml 。 fs.trash.interval</li><li>查看回收站：/user/root/.Trash</li><li>恢复回收站数据：hdfs dfs -mv trashFileDir hdfsDir</li><li>清空回收站：hdfs dfs -expunge</li></ol></li></ol>`,99);function c(r,u){return e(),t("div",null,[d,l(" more "),p])}const g=s(o,[["render",c],["__file","Hadoop-HDFS.html.vue"]]);export{g as default};
