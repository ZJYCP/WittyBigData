import{_ as n,V as s,W as a,X as e,Z as t,a1 as p}from"./framework-25aba5a5.js";const c={},o=t("p",null,"主要介绍Flink中的处理函数",-1),l=p(`<h2 id="基本处理函数" tabindex="-1"><a class="header-anchor" href="#基本处理函数" aria-hidden="true">#</a> 基本处理函数</h2><h3 id="处理函数的功能和使用" tabindex="-1"><a class="header-anchor" href="#处理函数的功能和使用" aria-hidden="true">#</a> 处理函数的功能和使用</h3><p>处理函数属于底层API，）了。处理函数提供了一个“定时服务”（TimerService），我们可以通过它访问流中的事件（event）、时间戳（timestamp）、水位线（watermark），甚至可以注册“定时事件”。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stream<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ProcessFunction是一个抽象类，继承AbstractRichFunction。</p><h3 id="processfunction解析" tabindex="-1"><a class="header-anchor" href="#processfunction解析" aria-hidden="true">#</a> ProcessFunction解析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRichFunction</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">I</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token class-name">OnTimerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抽象方法-processelement" tabindex="-1"><a class="header-anchor" href="#抽象方法-processelement" aria-hidden="true">#</a> 抽象方法.processElement()</h4><p>该方法对流中的<strong>每个元素都会调用一次</strong>，参数包括三个：</p><ul><li>value：当前元素</li><li>ctx：上下文，可以获得时间戳，定时服务，发送数据到侧输出流</li><li>out： 收集器，使用collect向下游发送数据</li></ul><h4 id="非抽象方法-ontimer" tabindex="-1"><a class="header-anchor" href="#非抽象方法-ontimer" aria-hidden="true">#</a> 非抽象方法.onTimer()</h4><p>在注册好的定时器触发时调用</p><p>由三个参数：</p><ul><li>timestamp：时间戳，即触发时间</li><li>ctx：上下文</li><li>out：收集器</li></ul><p>只有<strong>按键分区流 keyedStream</strong>才支持定时器操作</p><h3 id="处理函数的分类" tabindex="-1"><a class="header-anchor" href="#处理函数的分类" aria-hidden="true">#</a> 处理函数的分类</h3><ol><li>ProcessFunction</li></ol><p>最基本的，基于DataStream直接调用</p><ol start="2"><li>KeyedProcessFunction</li></ol><p>按键分区后的流的处理函数，基于KeyedStream调用.proces时作为参数传入</p><ol start="3"><li>ProcessWindowFunction</li></ol><p>开窗之后的处理函数</p><ol start="4"><li>ProcessAllWindowFunction</li></ol><p>全窗口AllWindowedStream之后</p><ol start="5"><li>CoProcessFunction</li></ol><p>合并两条流之后的处理函数</p><ol start="6"><li>ProcesJoinFunction</li></ol><p>间隔连接两条流之后</p><ol start="7"><li>BroadcastProcessFunction</li></ol><p>广播连接流</p><ol start="8"><li>KeyedBroadcastProcessFunction</li></ol><p>按键分区的广播连接流处理函数</p><h2 id="按键分区处理函数" tabindex="-1"><a class="header-anchor" href="#按键分区处理函数" aria-hidden="true">#</a> 按键分区处理函数</h2><h3 id="定时器和定时服务" tabindex="-1"><a class="header-anchor" href="#定时器和定时服务" aria-hidden="true">#</a> 定时器和定时服务</h3><p>ctx的上下文提供<code>timerService()</code>方法，返回<code>TimerService</code>对象，其是一个基础服务接口，包含以下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取时间</span>
<span class="token comment">//获取当前处理时间</span>
<span class="token keyword">long</span> <span class="token function">currentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当前水位线（事件时间）</span>
<span class="token keyword">long</span> <span class="token function">currentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注册定时器 </span>
<span class="token comment">//注册处理时间定时器，超过time时触发</span>
<span class="token keyword">void</span> <span class="token function">registerProcessingTimeTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注册事件时间定时器，当水位线超过time时触发</span>
<span class="token keyword">void</span> <span class="token function">registerEventTimeTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除定时器</span>
<span class="token comment">// 删除触发时间为time的处理时间定时器</span>
<span class="token keyword">void</span> <span class="token function">deleteProcessingTimeTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除触发时间为time的处理时间定时器</span>
<span class="token keyword">void</span> <span class="token function">deleteEventTimeTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<strong>每个key和时间戳</strong>，最多只有一个定时器，会去重</p><h2 id="窗口处理函数" tabindex="-1"><a class="header-anchor" href="#窗口处理函数" aria-hidden="true">#</a> 窗口处理函数</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ProcessWindowFunction</span><span class="token generics"><span class="token punctuation">&lt;</span>IN<span class="token punctuation">,</span> OUT<span class="token punctuation">,</span> KEY<span class="token punctuation">,</span> <span class="token class-name">W</span> <span class="token keyword">extends</span> <span class="token class-name">Window</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRichFunction</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>
<span class="token class-name">KEY</span> key<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span>IN<span class="token punctuation">&gt;</span></span> elements<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span>OUT<span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心方法<code>process</code></p><ul><li>key: 窗口做统计的键</li><li>context：上下文</li><li>element：数据，是一个可迭代的集合</li><li>Out：发送数据</li></ul><p>上下文ctx：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">W</span> <span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">currentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">currentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">KeyedStateStore</span> <span class="token function">windowState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">KeyedStateStore</span> <span class="token function">globalState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> outputTag<span class="token punctuation">,</span> <span class="token class-name">X</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>没有timerService对象</li><li>windowState、globalState获取窗口状态和全局状态</li></ul><p>clear方法用于清除自定义的窗口状态</p><p>另一种窗口处理函数<code>ProcessAllWindowFunction</code>，就没有keyby的<code>AllWindowedStream</code>数据集进行处理</p><h2 id="topn案例" tabindex="-1"><a class="header-anchor" href="#topn案例" aria-hidden="true">#</a> TopN案例</h2><p>统计最近10秒钟内出现次数最多的两个水位（数据），并且每5秒钟更新一次。</p><p>使用KeyedProcessFunction</p>`,49);function i(u,r){return s(),a("div",null,[o,e(" more "),l])}const d=n(c,[["render",i],["__file","Flink处理函数.html.vue"]]);export{d as default};
