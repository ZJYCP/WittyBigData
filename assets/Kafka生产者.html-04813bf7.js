import{_ as e,V as o,W as c,$ as i,X as n,Y as a,Z as p,a1 as s,C as l}from"./framework-8aef05fa.js";const u={},r=n("p",null,"本章主要介绍Kafka生成者发送消息流程、分区、数据可靠性与去重等内容",-1),k=s(`<h2 id="生产者发送消息流程" tabindex="-1"><a class="header-anchor" href="#生产者发送消息流程" aria-hidden="true">#</a> 生产者发送消息流程</h2><h3 id="发送原理" tabindex="-1"><a class="header-anchor" href="#发送原理" aria-hidden="true">#</a> 发送原理</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505155642915.png" alt="生产者发送数据流程" tabindex="0" loading="lazy"><figcaption>生产者发送数据流程</figcaption></figure><h3 id="异步发送api-java" tabindex="-1"><a class="header-anchor" href="#异步发送api-java" aria-hidden="true">#</a> 异步发送API-JAVA</h3><h4 id="普通异步发送" tabindex="-1"><a class="header-anchor" href="#普通异步发送" aria-hidden="true">#</a> 普通异步发送</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
<span class="token comment">// 1. 创建 kafka 生产者的配置对象</span>
<span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 给 kafka 配置对象添加配置信息:bootstrap.servers</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// key,value 序列化(必须):key.serializer，value.serializer</span>
  properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 创建 kafka 生产者对象</span>
<span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 调用 send 方法,发送消息 for (int i = 0; i &lt; 5; i++) {</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 5. 关闭资源</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带回调函数的异步发送" tabindex="-1"><a class="header-anchor" href="#带回调函数的异步发送" aria-hidden="true">#</a> 带回调函数的异步发送</h4><p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元 数据信息(RecordMetadata)和异常信息(Exception)，如果 Exception 为 null，说明消息发 送成功，如果 Exception 不为 null，说明消息发送失败。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2 发送数据</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;atguigu&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主题： &quot;</span><span class="token operator">+</span>metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 分区： &quot;</span><span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同步发送api-java" tabindex="-1"><a class="header-anchor" href="#同步发送api-java" aria-hidden="true">#</a> 同步发送API-JAVA</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;kafka&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="生产者分区" tabindex="-1"><a class="header-anchor" href="#生产者分区" aria-hidden="true">#</a> 生产者分区</h2><h3 id="分区好处" tabindex="-1"><a class="header-anchor" href="#分区好处" aria-hidden="true">#</a> 分区好处</h3><ol><li>便于合理使用存储资源</li><li>提高并行度</li></ol><h3 id="分区策略" tabindex="-1"><a class="header-anchor" href="#分区策略" aria-hidden="true">#</a> 分区策略</h3><h4 id="_1-默认分区规则-defaultpartitioner" tabindex="-1"><a class="header-anchor" href="#_1-默认分区规则-defaultpartitioner" aria-hidden="true">#</a> 1. 默认分区规则 DefaultPartitioner</h4><ol><li>指定partition</li><li>key的hash取模</li><li>粘性分区，随机选取</li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505170909150.png" alt="默认分区规则" tabindex="0" loading="lazy"><figcaption>默认分区规则</figcaption></figure><h4 id="_2-自定义分区器" tabindex="-1"><a class="header-anchor" href="#_2-自定义分区器" aria-hidden="true">#</a> 2. 自定义分区器</h4><p>需求：发送过来的数据中如果包含 atguigu，就发往 0 号分区，不包含 atguigu，就发往 1 号分区。</p><ol><li>实现partition接口，重写partition方法</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">Partitioner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">Cluster</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取数据 atguigu  hello</span>
        <span class="token class-name">String</span> msgValues <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> partition<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> partition<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用分区器</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">PARTITIONER_CLASS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;com.atguigu.kafka.producer.MyPartitioner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="生产者如何提高吞吐量" tabindex="-1"><a class="header-anchor" href="#生产者如何提高吞吐量" aria-hidden="true">#</a> 生产者如何提高吞吐量</h2>`,25),d=n("li",null,"batch.size 批次大小 默认16k",-1),m={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"compression.type ： 压缩方法",-1),g=n("li",null,"recordAccumulator：缓冲区大小",-1),h=s(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BATCH_SIZE_CONFIG</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">LINGER_MS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BUFFER_MEMORY_CONFIG</span><span class="token punctuation">,</span><span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//默认 none，可配置值 gzip、snappy、 lz4 和 zstd</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;snappy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据可靠性" tabindex="-1"><a class="header-anchor" href="#数据可靠性" aria-hidden="true">#</a> 数据可靠性</h2><h3 id="ack应答" tabindex="-1"><a class="header-anchor" href="#ack应答" aria-hidden="true">#</a> ACK应答</h3><p><strong>0</strong>:生产者发送过来的数据，不需要等数据落盘应答，可靠性差，效率高;</p><p><strong>1</strong>:生产者发送过来的数据，<strong>Leader</strong>收到数据后应答，可靠性中等，效率中等，一般用于传输普通日志</p><p><strong>-1</strong>(<strong>all</strong>):生产者发送过来的数据，<strong>Leader</strong>和<strong>ISR</strong>队列里面 的所有节点收齐数据后应答，可靠性高，效率低，一般用于传输和钱相关的数据。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505184347120.png" alt="ack：all" tabindex="0" loading="lazy"><figcaption>ack：all</figcaption></figure><p>针对-1</p><p>Leader维护了一个动态的in-sync replica set(<strong>ISR</strong>)，意为和 Leader保持同步的Follower+Leader集合(leader:0，isr:0,1,2)</p>`,9),b={href:"http://replica.lag.time.max.ms",target:"_blank",rel:"noopener noreferrer"},f=s(`<p><strong>数据完全可靠条件 = ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</strong></p><p><strong>数据重复性</strong></p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505184822042.png" alt="ack=-1数据重复性" tabindex="0" loading="lazy"><figcaption>ack=-1数据重复性</figcaption></figure><h3 id="代码配置" tabindex="-1"><a class="header-anchor" href="#代码配置" aria-hidden="true">#</a> 代码配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ACKS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 重试次数retries，默认是int最大值，2147483647 properties.put(ProducerConfig.RETRIES_CONFIG, 3);</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据去重" tabindex="-1"><a class="header-anchor" href="#数据去重" aria-hidden="true">#</a> 数据去重</h2><h3 id="数据传递语义" tabindex="-1"><a class="header-anchor" href="#数据传递语义" aria-hidden="true">#</a> 数据传递语义</h3><p><strong>至少一次（At Least Once）</strong>： ACK=-1，分区副本&gt;=2，ISR应答最小副本数&gt;=2</p><p><strong>最多一次（At Most Once</strong>）：ACK=0</p><p>至少一次可以保证数据不丢失，但是不能保证数据不重复</p><p>最多一次可以保证数据不重复，不能保证数据不丢失</p><p>精确一次（Exactly Once）：幂等性与事务</p><h3 id="幂等性" tabindex="-1"><a class="header-anchor" href="#幂等性" aria-hidden="true">#</a> 幂等性</h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><p><strong>幂等性</strong>：Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复</p><p><strong>精确一次（Exactly Once）</strong> = 幂等性 + 至少一次</p><p>重复判断的依据：</p><p>具有相同**&lt;PID ,partition, SeqNumber&gt;**的消息，Broker会持久化一条新的。PID是Kafka每次重启后分配一个新的，Partition表示分区号，Sequence Number是单调自增的。</p><p>幂等性只能保证的是在<strong>单分区单会话内不重复</strong></p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505192731756.png" alt="幂等性" tabindex="0" loading="lazy"><figcaption>幂等性</figcaption></figure><h4 id="开启" tabindex="-1"><a class="header-anchor" href="#开启" aria-hidden="true">#</a> 开启</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>enable.idempotence 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生产者事务" tabindex="-1"><a class="header-anchor" href="#生产者事务" aria-hidden="true">#</a> 生产者事务</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505193825808.png" alt="事务" tabindex="0" loading="lazy"><figcaption>事务</figcaption></figure><h2 id="数据有序" tabindex="-1"><a class="header-anchor" href="#数据有序" aria-hidden="true">#</a> 数据有序</h2><ul><li>单分区内有序</li><li>多分区，分区与分区间无序</li></ul><h2 id="数据乱序" tabindex="-1"><a class="header-anchor" href="#数据乱序" aria-hidden="true">#</a> 数据乱序</h2><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230505194432241.png" alt="解决单分区内乱序" tabindex="0" loading="lazy"><figcaption>解决单分区内乱序</figcaption></figure><ol><li>kafka在1.x版本之前保证数据单分区有序，条件如下:</li></ol><p><strong>max.in.flight.requests.per.connection</strong>=1(不需要考虑是否开启幂等性)</p><ol start="2"><li><p>kafka在1.x及以后版本保证数据单分区有序，条件如下:</p><ol><li><p>未开启幂等性，同上</p></li><li><p>开启幂等性</p><p><strong>max.in.flight.requests.per.connection</strong>需要设置小于等于<strong>5</strong>。</p><p>原因说明:因为在kafka1.x以后，启用幂等后，kafka服务端会缓存producer发来的最近5个request的元数据， 故无论如何，都可以保证最近5个request的数据都是有序的。根据SeqNumber排序。</p></li></ol></li></ol>`,31);function y(x,_){const t=l("ExternalLinkIcon");return o(),c("div",null,[r,i(" more "),k,n("ol",null,[d,n("li",null,[n("a",m,[a("linger.ms"),p(t)]),a(" 等待时间，默认0")]),v,g]),h,n("p",null,[a("如果Follower长时间未向Leader发送通信请求或同步数据，则 该Follower将被踢出ISR。该时间阈值由"),n("strong",null,[n("a",b,[a("replica.lag.time.max.ms"),p(t)])]),a("参 数设定，默认30s。例如2超时，(leader:0, isr:0,1)。")]),f])}const q=e(u,[["render",y],["__file","Kafka生产者.html.vue"]]);export{q as default};
