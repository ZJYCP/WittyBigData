import{_ as i,V as a,W as e,X as l,Z as n,a1 as r}from"./framework-25aba5a5.js";const o={},t=n("p",null,"YARN 是 Hadoop2 引入的通用的资源管理和任务调度的平台，可以在 YARN 上运行 MapReduce、Tez、Spark 等多种计算框架",-1),p=r('<h2 id="yarn的架构" tabindex="-1"><a class="header-anchor" href="#yarn的架构" aria-hidden="true">#</a> Yarn的架构</h2><h3 id="yarn集群架构和工作原理" tabindex="-1"><a class="header-anchor" href="#yarn集群架构和工作原理" aria-hidden="true">#</a> yarn集群架构和工作原理</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230308210737488.png" alt="image-20230308210737488" tabindex="0" loading="lazy"><figcaption>image-20230308210737488</figcaption></figure><p>yarn由两个服务组成，ResourceManager和ApplicationMaster</p><ul><li>ResourceManager</li></ul><p>RM是一个全局的资源管理器，负责<strong>整个系统的资源管理和分配</strong>，由调度器（Scheduler）和应用程序管理器（Application Manager）组成。</p><p>调度器：将系统中的资源分配给正在运行的应用程序</p><p>应用程序管理器：负责应用程序的提交，与调度器协商资源启动Application Master</p><ul><li><p>Application Master</p><ol><li>与RM调度器协商以获得资源</li><li>将得到的任务分配给内部的任务</li><li>与NN通信以启动、停止任务</li><li>监控所有内部任务的状态，负责重新申请资源重启任务</li></ol></li><li><p>nodeManager</p></li></ul><p>每个节点上的资源和任务管理器，将RM汇报本节点的资源使用情况和各个Container运行状态。</p><p>接受处理来着AM的停止启动container请求</p><ul><li>container</li></ul><p>Yarn中的资源抽象，封装了各种资源，一个应用程序分配一个container。</p><h3 id="yarn的任务提交流程" tabindex="-1"><a class="header-anchor" href="#yarn的任务提交流程" aria-hidden="true">#</a> yarn的任务提交流程</h3><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230309000500649.png" alt="image-20230309000500649" tabindex="0" loading="lazy"><figcaption>image-20230309000500649</figcaption></figure><p>当jobclient向yarn提交一个应用程序后，将分两阶段运行这个应用程序。一是启动Application Master，二是由AM创建应用程序，申请资源，监控运行。</p><p>具体如下:</p><ol><li>客户端向yarn提交应用程序，并指定AM程序，启动AM命令，用户程序。</li><li>RM为这个应用程序分配第一个Container，并与之对应的NM通讯，要求在这个Container中启动应用程序AM</li><li>AM向RM注册，然后拆分为内部各个子任务，为各个子任务申请资源，监控任务运行</li><li>AM采用轮询的方式向RM申请和领取资源</li><li>RM为AM分配资源，以Container形式返回</li><li>AM申请到资源后，便与之对应的NM通信，要求NM启动任务</li><li>NM为任务设置好运行环境，将任务启动命令写到一个脚本，并通过这个脚本启动任务</li><li>各个任务向AM汇报自己的状态和进度，以便任务失败时可以重启</li><li>应用程序完成后，AM向RM注销并关闭自己</li></ol><h2 id="rm和nm的功能介绍" tabindex="-1"><a class="header-anchor" href="#rm和nm的功能介绍" aria-hidden="true">#</a> RM和NM的功能介绍</h2><h3 id="resourcemanager-rm-基本介绍" tabindex="-1"><a class="header-anchor" href="#resourcemanager-rm-基本介绍" aria-hidden="true">#</a> ResourceManager（RM）基本介绍</h3><ol><li><strong>职能</strong></li></ol><ul><li><strong>与客户端交互</strong>，处理客户端的请求</li><li><strong>启动和管理AM</strong>，并在运行失败的时候重新启动它</li><li><strong>管理NM</strong>，接受来自NM的资源汇报信息，并想NM下达管理指令</li><li><strong>资源管理和调度</strong>，接收来自AM的资源请求，并为它分配资源</li></ul><ol start="2"><li><strong>RM的内部结构</strong></li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230314192823193.png" alt="image-20230314192823193" tabindex="0" loading="lazy"><figcaption>image-20230314192823193</figcaption></figure><ul><li>用户交互模块 <ol><li>clientRMService：为不同用户服务，提交程序，终止程序，获取程序状态</li><li>adminService：给管理员提供服务</li><li>WebAPP</li></ol></li><li>NM管理模块 <ol><li>NMLivelinessMonitor：<strong>监控NM是否活着</strong>，如果指定时间未收到心跳，就从集群中删除。RM会通过心跳告知AM某个NM上的Container失效，如果AM判断需要重新执行，则AM重新向RM申请资源</li><li>NodeListManager：<strong>维度inlude和exlude的NM节点列表</strong>。exlude列表里的NM不允许与RM进行通信</li><li>ResourceTrackerService：处理来自NM的请求，包括注册（节点ID、可用资源上线）和心跳（各个Container运行状态，运行Application列表，节点健康状态）。</li></ol></li><li>AM管理模块 <ol><li>AMLivelinessMonitor：<strong>监控AM是否活着</strong>，如果指定时间内没有收到心跳，则将正在运行的Container设置为失败状态，而AM会被重新分配到另一个节点上。</li><li>ApplicationMasterLauncher：<strong>要求某一个NM启动ApplicationMaster</strong>，他处理创建AM和kill Am的请求</li><li>ApplicationMasterService：<strong>处理来自AM的请求</strong>。注册、心跳、清理</li></ol></li><li>Application管理模块 <ol><li>ApplicationACLsManager：管理应用程序的访问权限</li><li>RMAppMAnager：管理应用程序的启动和关闭</li><li>ContainerAllocationExpirer：RM分配Container给AM后，不允许AM长时间不对Container使用，因为会降低集群的利用率，如果超时还没有在NM上启动Container，RM就会强制回收Container。</li></ol></li><li>状态机管理模块 <ol><li>RMApp：</li></ol></li><li>安全模块</li><li>资源分配模块 <ul><li>ResourceScheduler：资源调度器</li></ul></li></ul><ol start="3"><li><strong>启动Application Master</strong></li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230314195744111.png" alt="image-20230314195744111" tabindex="0" loading="lazy"><figcaption>image-20230314195744111</figcaption></figure><ol><li><p>客户端提交一个任务给RM，ClientRMService处理客户端请求</p></li><li><p>ClientRMService 通知RMAppManager</p></li><li><p>RMAppManager为应用程序创建RMApp对象来维护任务的状态</p></li><li><p>RMApp启动任务，创建RMAppAttempt对象</p></li><li><p>RMAppAttempt进行一些初始化工作，然后通知ResourceScheduler申请资源</p></li><li><p>ResourceScheduler为任务分配资源后，创建一个RMContainer维护Container状态</p></li><li><p>通知RMAppAttempt已经分配资源</p></li><li><p>RMAppAttempt通知ApplicationMasterLauncher在资源上启动AM</p></li><li><p>在NodeManager的已分配资源上启动AM</p></li><li><p>AM启动后向ApplicationMasterService注册</p></li><li><p><strong>申请和分配container</strong></p></li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230314203458656.png" alt="image-20230314203458656" tabindex="0" loading="lazy"><figcaption>image-20230314203458656</figcaption></figure><p>AM向RM请求资源和RM为AM分配资源是两个循环过程：</p><p>阶段一：AM请求资源并领取资源，AM发送请求、RM记录请求</p><p>阶段二：NM向RM汇报各个Container运行状态，如果RM发现他在上面有空闲的资源就分配给等待的AM</p><p>具体来说：</p><ul><li>阶段一：</li></ul><ol start="5"><li><p>杀死Application</p></li><li><p>Container超时</p></li><li><p>安全管理</p></li></ol><h3 id="nodemanager功能介绍" tabindex="-1"><a class="header-anchor" href="#nodemanager功能介绍" aria-hidden="true">#</a> nodeManager功能介绍</h3><ol><li><strong>模块</strong></li></ol><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/image-20230314212118581.png" alt="image-20230314212118581" tabindex="0" loading="lazy"><figcaption>image-20230314212118581</figcaption></figure><ul><li><p>NodeStatusUpdater：NM和RM的通讯通道。向RM注册、汇报节点可用资源、汇报各Container状态等。</p></li><li><p><strong>ContainerManager</strong></p></li><li><p>RPC Server：AM和NM通讯的通道，接收AM请求，启动停止Container</p></li><li><p>ResourceLocalizationService：负责Container所需资源的本地化，下载资源文件</p></li><li><p>ContainersLauncher：维护一个线程池并行操作Container</p></li><li><p>AuxServices</p></li><li><p>ContainerMonitor：监控Container的资源使用量</p></li><li><p>LogHandle：控制Container保存</p></li><li><p>ContainerEventDispatcher:将ContainerEvent调度 给对应的Container状态机</p></li><li><p>ApplicationEventDispatcher</p></li><li><p>ContainerExecutor：启动和清除Container对应的进程</p></li><li><p>NodeHealthCheckerServiceNodeHealthCheckerService</p></li><li><p>DeletionService：文件删除</p></li><li><p>Security：安全模块</p></li><li><p>WebServer</p></li></ul><ol start="2"><li><strong>状态机管理</strong></li></ol><ul><li>Application状态机：维护自己节点的Application状态</li><li>Container状态机：维护Container的生命周期</li><li>LocalizedResource状态机：维护资源（文件、jar包）生命周期的数据结构</li></ul><ol start="3"><li><strong>Container生命周期的管理</strong></li></ol><p>接收AM的请求启动Container</p><ol><li><p>资源本地化：分布式缓存。应用程序初始化、Container本地化</p></li><li><p>运行Container：由containerLauncher服务调用ContainerExecutor进行。将待运行的Container所需要的环境变量和运行命令写到shell脚本launch_container.sh中，并将启动该脚本的命令写到default_container_executor.sh中，然后启动改脚本</p></li><li><p>资源清理：资源本地化的逆过程，Container运行完成后，NodeManager来回收资源</p></li></ol><h2 id="application-master介绍" tabindex="-1"><a class="header-anchor" href="#application-master介绍" aria-hidden="true">#</a> Application Master介绍</h2><p>AM是特定计算框架(MapReduce)的一个实例，负责与RM协商资源，和NM协同执行、监控Container</p><h3 id="am的职能" tabindex="-1"><a class="header-anchor" href="#am的职能" aria-hidden="true">#</a> AM的职能</h3><ol><li>注册，将RM报告自己活跃信息</li><li>计算应用程序的资源需求</li><li>将需求转换为YARN调度器可以理解的ResourceRequest</li><li>与调度器协商申请资源</li><li>与NodeManager协同合作使用分配的Container</li><li>跟踪正在运行的Container状态，监控它的运行</li><li>对Container或者节点失败的情况进行处理，在必要的情况下重新申请资源</li></ol><h3 id="报告活跃" tabindex="-1"><a class="header-anchor" href="#报告活跃" aria-hidden="true">#</a> 报告活跃</h3><ol><li>注册</li></ol><p>AM执行的第一个操作就是向RM注册，告知IPC地址和网页URL</p><p>IPC地址是面相客户端的服务地址，网页URL是AM的Web服务地址</p><ol start="2"><li>心跳</li></ol><p>注册成功后，AM周期性的发送心跳到RM确认他还活着</p><h3 id="资源需求" tabindex="-1"><a class="header-anchor" href="#资源需求" aria-hidden="true">#</a> 资源需求</h3><ol><li>静态资源</li></ol><p>在任务提交时就确定，在AM运行时不再变化的资源，比如MapReduce中的map数量</p><ol start="2"><li>动态资源</li></ol><p>在运行时确定要请求数量的资源</p><h3 id="调度任务" tabindex="-1"><a class="header-anchor" href="#调度任务" aria-hidden="true">#</a> 调度任务</h3><p>当AM的资源请求达到一定数量或者到了心跳时，AM才会发送心跳</p><p>心跳：resourceReuest =》 resourceAsks、ContainerID、containersToBeReleased</p><p>RM的响应：新分配的Container列表，已完成的Container状态，集群可用资源上限</p><h3 id="启动container" tabindex="-1"><a class="header-anchor" href="#启动container" aria-hidden="true">#</a> 启动Container</h3><ol><li>AM从RM那里得到Container就可以启动Container</li><li>AM首先构造ContainerLaunchContext对象，包括了分配资源的大小、安全令牌、启动Container执行的命令、进程环境、必要的文件等</li><li>AM与NM通讯，发送startContainerRequest请求，逐一或者批量启动Container</li><li>NM通过StartContainerResponse回应请求，包括成功启动的Container，失败的</li><li>整个过程中，AM没有跟RM进行通信</li><li>AM也可以发送stopContainerRequest请求来停止Container</li></ol><h3 id="am的失败和恢复" tabindex="-1"><a class="header-anchor" href="#am的失败和恢复" aria-hidden="true">#</a> AM的失败和恢复</h3><p>当 AM 失效后，YARN 只负责重新启动一个 AM，任务恢复到失效前的状态是由 AM 自己完成的。AM 为了能实现恢复任务的目标，可以采用以下方案:将任务的状 态持久化到外部存储中。比:MapReduce 框架的 ApplicationMaster 会将已完 成的任务持久化，失效后的恢复时可以将已完成的任务恢复，重新运行未完成的 任务。</p><h2 id="yarn的资源调度" tabindex="-1"><a class="header-anchor" href="#yarn的资源调度" aria-hidden="true">#</a> yarn的资源调度</h2><h3 id="资源调度器的分类" tabindex="-1"><a class="header-anchor" href="#资源调度器的分类" aria-hidden="true">#</a> 资源调度器的分类</h3><p>不同任务类型对资源有不同的要求，有的对时间要求不是很高（HIVE），有的任务要求及时返回结果（HBase），有的是CPU密集型，有的是IO密集型。</p><h3 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构" aria-hidden="true">#</a> 基本结构</h3><p>事件处理器</p><ul><li> Node_Removed 集群中移除一个计算节点，资源调度器需要收到该事件后从可分配 的资源总量中移除相应的资源量。</li><li> Node_Added 集群增加一个节点</li><li> Application_added RM 收到一个新的 Application。</li><li> Application_Remove 表示一个 Application 运行结束</li><li> Container_expired 当一个 Container 分配给 AM 后，如果在一段时间内 AM 没有启动 Container，就触发这个事件。调度器会对该 Container 进行回收。</li><li> Node_Update RM 收到 NM 的心跳后，就会触发 Node_Update 事件。</li></ul><h3 id="资源调度的三种模型" tabindex="-1"><a class="header-anchor" href="#资源调度的三种模型" aria-hidden="true">#</a> 资源调度的三种模型</h3><p>Apache的hadoop默认capacity，CDH默认fair</p><ol><li><p>双层资源调度模型</p></li><li><p>资源保证机制</p></li><li><p>资源分配算法</p></li><li><p>资源抢占模型</p></li></ol><h4 id="层级队列管理机制-fifo-调度策略" tabindex="-1"><a class="header-anchor" href="#层级队列管理机制-fifo-调度策略" aria-hidden="true">#</a> 层级队列管理机制 FIFO 调度策略</h4><h4 id="capacity-scheduler" tabindex="-1"><a class="header-anchor" href="#capacity-scheduler" aria-hidden="true">#</a> Capacity Scheduler</h4><h4 id="fair-scheduler" tabindex="-1"><a class="header-anchor" href="#fair-scheduler" aria-hidden="true">#</a> Fair Scheduler</h4>',79);function c(s,d){return a(),e("div",null,[t,l(" more "),p])}const M=i(o,[["render",c],["__file","Hadoop-Yarn.html.vue"]]);export{M as default};
