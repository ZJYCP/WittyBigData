import{_ as d,V as o,W as t,$ as i,X as e,Y as a,a1 as c}from"./framework-8aef05fa.js";const r={},n=e("p",null,[a("HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有"),e("strong",null,"高容错、高吞吐量"),a("等特性，可以部署在"),e("strong",null,"低成本"),a("的硬件上")],-1),s=c('<h2 id="hdfs设计原理" tabindex="-1"><a class="header-anchor" href="#hdfs设计原理" aria-hidden="true">#</a> HDFS设计原理</h2><h3 id="hdfs架构" tabindex="-1"><a class="header-anchor" href="#hdfs架构" aria-hidden="true">#</a> HDFS架构</h3><p>HDFS 遵循主/从架构，由单个 NameNode(NN) 和多个 DataNode(DN) 组成：</p><ul><li><strong>NameNode</strong> : 负责执行有关 <code>文件系统命名空间</code> 的操作，例如打开，关闭、重命名文件和目录等。它同时还负责集群<strong>元数据的存储</strong>，记录着文件中各个数据块的位置信息。</li><li><strong>DataNode</strong>：负责提供来自文件系统客户端的读写请求，执行块的创建，删除等操作。</li></ul><h3 id="文件系统命名空间" tabindex="-1"><a class="header-anchor" href="#文件系统命名空间" aria-hidden="true">#</a> 文件系统命名空间</h3><p>HDFS 的 <code>文件系统命名空间</code> 的层次结构与大多数文件系统类似 (如 Linux)， 支持目录和文件的创建、移动、删除和重命名等操作，支持配置用户和访问权限，但不支持硬链接和软连接。<code>NameNode</code> 负责维护文件系统名称空间，记录对名称空间或其属性的任何更改。</p><h3 id="数据复制" tabindex="-1"><a class="header-anchor" href="#数据复制" aria-hidden="true">#</a> 数据复制</h3><p>为了保证容错性，HDFS 提供了数据复制机制。HDFS 将每一个文件存储为一系列<strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认情况下，块大小是 128M，默认复制因子是 3）。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f68646673646174616e6f6465732e706e67.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="数据复制的实现原理" tabindex="-1"><a class="header-anchor" href="#数据复制的实现原理" aria-hidden="true">#</a> 数据复制的实现原理</h3><p>大型的 HDFS 实例在通常分布在多个机架的多台服务器上，不同机架上的两台服务器之间通过交换机进行通讯。在大多数情况下，同一机架中的服务器间的网络带宽大于不同机架中的服务器之间的带宽。因此 HDFS 采用机架感知副本放置策略，对于常见情况，当复制因子为 3 时，HDFS 的放置策略是：</p><p>在写入程序位于 <code>datanode</code> 上时，就优先将写入文件的一个副本放置在该 <code>datanode</code> 上，否则放在随机 <code>datanode</code> 上。之后在另一个远程机架上的任意一个节点上放置另一个副本，并在该机架上的另一个节点上放置最后一个副本。此策略可以减少机架间的写入流量，从而提高写入性能。</p><figure><img src="https://blog-1252832257.cos.ap-shanghai.myqcloud.com/68747470733a2f2f67697465652e636f6d2f68656962616979696e672f426967446174612d4e6f7465732f7261772f6d61737465722f70696374757265732f686466732de69cbae69eb62e706e67.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果复制因子大于 3，则随机确定第 4 个和之后副本的放置位置，同时保持每个机架的副本数量低于上限，上限值通常为 <code>（复制系数 - 1）/机架数量 + 2</code>，需要注意的是不允许同一个 <code>dataNode</code> 上具有同一个块的多个副本。</p><h3 id="副本的选择" tabindex="-1"><a class="header-anchor" href="#副本的选择" aria-hidden="true">#</a> 副本的选择</h3><p>为了最大限度地减少带宽消耗和读取延迟，HDFS 在执行读取请求时，优先读取距离读取器<strong>最近的副本</strong>。如果在与读取器节点相<strong>同的机架</strong>上存在副本，则优先选择该副本。如果 HDFS 群集跨越多个数据中心，则优先选择<strong>本地数据中心</strong>上的副本。</p><h3 id="架构的稳定性" tabindex="-1"><a class="header-anchor" href="#架构的稳定性" aria-hidden="true">#</a> 架构的稳定性</h3><ol><li>心跳机制和重新复制</li></ol><p>每个 DataNode 定期向 NameNode 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 DataNode 标记为死亡。NameNode 不会将任何新的 IO 请求转发给标记为死亡的 DataNode，也不会再使用这些 DataNode 上的数据。 由于数据不再可用，可能会导致某些块的复制因子小于其指定值，NameNode 会跟踪这些块，并<strong>在必要的时候进行重新复制</strong>。</p><ol start="2"><li>数据的完整性</li></ol><p>由于存储设备故障等原因，存储在 DataNode 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，HDFS 提供了数据完整性校验机制来保证数据的完整性，具体操作如下：</p><p>当客户端创建 HDFS 文件时，它会计算文件的每个块的 <code>校验和</code>，并将 <code>校验和</code> 存储在同一 HDFS 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 DataNode 接收的数据是否与存储在关联校验和文件中的 <code>校验和</code> 匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 DataNode 获取该块的其他可用副本。</p><ol start="3"><li>元数据磁盘故障</li></ol><p><code>FsImage</code> 和 <code>EditLog</code> 是 HDFS 的核心数据，这些数据的意外丢失可能会导致整个 HDFS 服务不可用。为了避免这个问题，可以配置 NameNode 使其支持 <code>FsImage</code> 和 <code>EditLog</code> 多副本同步，这样 <code>FsImage</code> 或 <code>EditLog</code> 的任何改变都会引起每个副本 <code>FsImage</code> 和 <code>EditLog</code> 的同步更新。</p><ol start="4"><li>支持快照</li></ol><p>快照支持在特定时刻存储数据副本，在数据意外损坏时，可以通过回滚操作恢复到健康的数据状态。</p><h2 id="hdfs的特点" tabindex="-1"><a class="header-anchor" href="#hdfs的特点" aria-hidden="true">#</a> HDFS的特点</h2><ol><li>高容错：有副本机制</li><li>高吞吐量：高吞吐量，而非低延迟</li><li>大文件支持：GB到TB级别的</li><li>简单一致性模型：适合一次写入多次读取的访问模型。支持将内容追加到文件末尾，但不支持数据的随机访问，不能从文件任意位置新增数据</li><li>跨平台移植性：其他大数据计算框架都可以将其作为数据持久化的方案</li></ol>',28);function l(h,f){return o(),t("div",null,[n,i(" more "),s])}const p=d(r,[["render",l],["__file","Hadoop-HDFS.html.vue"]]);export{p as default};
